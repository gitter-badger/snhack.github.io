<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: projects | Swindon Hackspace]]></title>
  <link href="http://swindon.hackspace.org.uk/blog/categories/projects/atom.xml" rel="self"/>
  <link href="http://swindon.hackspace.org.uk/"/>
  <updated>2014-05-12T02:44:49+01:00</updated>
  <id>http://swindon.hackspace.org.uk/</id>
  <author>
    <name><![CDATA[Swindon Hackspace]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[PiFace Control And Display Board]]></title>
    <link href="http://swindon.hackspace.org.uk/blog/piface-control-and-display-board/"/>
    <updated>2014-05-08T17:20:00+01:00</updated>
    <id>http://swindon.hackspace.org.uk/blog/piface-control-and-display-board</id>
    <content type="html"><![CDATA[<p>The Hackspace recently took delivery of a 
<a href="http://uk.farnell.com/piface/piface-control-display/i-o-board-with-lcd-display-for/dp/2344458">PiFace Control and Display board from Farnell</a>.
It is an add-on board for the Raspberry Pi that includes a 16 character by 2 line
display, five push buttons, a toggle button and an IR receiver.  The 
intention is to use this on the Hackspace 3D printer to display some information
about the printer (bed and extruder temperatures) and about the job (percent
complete).  It would also be nice to use the buttons to control some of the 
functions of the printer such as priming the extruder.</p>

<p>In this post I’ll cover what I did to get up and running with the PiFace.  This
was really just a learning exercise to understand how it works and what can be
done.  There will be another post about getting it working with the 3D printer
later on.</p>

<!-- more -->

<p><img src="Piface.jpg" alt="PiFace" /></p>

<h2 id="getting-the-raspberry-pi-ready">Getting The Raspberry Pi Ready</h2>

<p>There is a nice guide on getting everything setup on the <a href="http://www.piface.org.uk/guides/setting_up_pifacecad/">PiFace website</a>
so I won’t go into every detail again.  In short:</p>

<ul>
  <li>
    <p>Updated the Raspbian install on our Raspberry Pi by running 
<code>apt-get update &amp;&amp; apt-get upgrade</code>  This took some hours, must have 
been quite a while since we did it!</p>
  </li>
  <li>
    <p>Enabled SPI using <code>raspi-config</code>.  What this actually seems to do is make 
sure the spi kernel module is installed.</p>
  </li>
</ul>

<p><code>sh
pi@raspberrypi ~ $ lsmod |grep spi
regmap_spi              1897  1 snd_soc_core
spi_bcm2708             4728  0
</code></p>

<ul>
  <li>Installed the PiFace Python modules <code>apt-get install python3-pifacecad</code>.
It’s nice that it is included in the Raspbian repos and can be installed so easily.</li>
</ul>

<h2 id="first-test">First Test</h2>

<p>The best idea is always to test using some code written by someone else
so that you know you have everything setup correctly.  Fortunately there is
a nice sysinfo sample provided.</p>

<p><code>sh
pi@raspberrypi ~ $ python3 /usr/share/doc/python3-pifacecad/examples/sysinfo.py
</code></p>

<p><img src="Sysinfo.jpg" alt="Sysinfo Demo" /></p>

<p>That works perfectly.  Time to dive into python and see what the api is like.</p>

<h2 id="hello-world-using-the-python-shell">Hello World Using The Python Shell</h2>

<p><code>py
pi@raspberrypi ~ $ python3
Python 3.2.3 (default, Mar  1 2013, 11:53:50)
[GCC 4.6.3] on linux2
Type "help", "copyright", "credits" or "license" for more information.
&gt;&gt;&gt; import pifacecad as p
&gt;&gt;&gt; cad = p.PiFaceCAD()
&gt;&gt;&gt; cad.lcd.backlight_on()
&gt;&gt;&gt; cad.lcd.write("Hello World!")
</code></p>

<p><img src="HelloWorld.jpg" alt="Hello World" /></p>

<p>Pretty simple!  It took me much longer than this to get one of these
displays working on Arduino the first time I tried it.  But a lot of 
that was sorting out the wiring!  Thats one good reason to get a 
PiFace instead of wiring up your own display.</p>

<h2 id="something-a-bit-fancier">Something A Bit Fancier</h2>

<p>Ok, let’s try something a bit more tricky.  There are api commands to
move the cursor around and to hide the cursor, so let’s have a go with those.</p>

<p><code>py
pi@raspberrypi ~ $ python3
Python 3.2.3 (default, Mar  1 2013, 11:53:50)
[GCC 4.6.3] on linux2
Type "help", "copyright", "credits" or "license" for more information.
&gt;&gt;&gt; import pifacecad as p
&gt;&gt;&gt; cad = p.PiFaceCAD()
&gt;&gt;&gt; cad.lcd.backlight_on()
&gt;&gt;&gt; cad.lcd.clear()
&gt;&gt;&gt; cad.lcd.set_cursor(5,0)
&gt;&gt;&gt; cad.lcd.write("Swindon")
&gt;&gt;&gt; cad.lcd.set_cursor(5,1)
&gt;&gt;&gt; cad.lcd.write("Hackspace")
&gt;&gt;&gt; cad.lcd.cursor_off()
&gt;&gt;&gt; cad.lcd.blink_off()
</code></p>

<p>A few points to note here.  For the non-programmers out there, computers count 
from zero, so “5” is actually the 6th position along and “0” is the first row. 
Interesting that you have to call both <code>cursor_off()</code> and <code>blink_off()</code> to totally 
get rid of the cursor, but that could be useful in certain situations.</p>

<p><img src="Hackspace.jpg" alt="Swindon Hackspace" /></p>

<h2 id="custom-bitmaps">Custom Bitmaps</h2>

<p>It would be nice if I could get the Swindon Hackspace logo on there too 
using the custom bitmap support.  From the 
<a href="http://piface.github.io/pifacecad/creating_custom_bitmaps.html">documentation</a>
it doesn’t look too difficult,  there is a <a href="http://www.quinapalus.com/hd44780udg.html">page for generating the codes</a> 
to create characters that is linked to from the documentation.  If you’re familiar with
setting bits in bytes it’s fairly easy to see what is going on; if you want the
right most pixel to be on, add 1, the second from the right, add 2, third
from the right add 4, fourth from the right, add 8, fifth from the right
add 16.  Do this for each line and you have the 8 values you need to pass 
into the <code>LCDBitmap()</code> function.</p>

<p>However there isn’t really enough room to get the hackspace logo in a single 
character so let’s try using more than one.  No mention of how many custom 
characters you are allowed in the PiFace docs, but the designer page about 
the HD44780 says you can have up to eight.  If we had 3x2 that would give us 
(5+5+5) x (8+8) = 15x16 pixels to play with.  That’s a nice square-ish shape and 
uses 6 custom characters so could work.  </p>

<p>I created a new image in Gimp that is 15x16 pixels, zoom in to 1600% and 
started designing by filling in pixels.  I then “split” this into six by using
the select tool to draw round each group of 5x8 pixels and copied it into
the online designer to generate the codes.  Lazy I know, I could work out
those numbers myself!</p>

<p>My first attempt didn’t look so great because of where the physical gaps 
between the characters on the display fell, but a bit of tweaking and I ended 
up with something like this:</p>

<p><code>py
&gt;&gt;&gt; sh = p.LCDBitmap([3,7,14,12,24,24,31,31])
&gt;&gt;&gt; cad.lcd.store_custom_bitmap(0, sh)
&gt;&gt;&gt; sh = p.LCDBitmap([31,31,0,27,27,27,31,31])
&gt;&gt;&gt; cad.lcd.store_custom_bitmap(1, sh)
&gt;&gt;&gt; sh = p.LCDBitmap([24,28,14,7,3,0,0,0])
&gt;&gt;&gt; cad.lcd.store_custom_bitmap(2, sh)
&gt;&gt;&gt; sh = p.LCDBitmap([0,0,0,24,28,14,7,3])
&gt;&gt;&gt; cad.lcd.store_custom_bitmap(3, sh)
&gt;&gt;&gt; sh = p.LCDBitmap([31,31,27,27,27,0,31,31])
&gt;&gt;&gt; cad.lcd.store_custom_bitmap(4, sh)
&gt;&gt;&gt; sh = p.LCDBitmap([31,31,3,3,6,14,28,24])
&gt;&gt;&gt; cad.lcd.store_custom_bitmap(5, sh)
</code></p>

<p>That code loads six custom characters into memory locations zero to five.
Now all we need to do is write them out to the display.  It might be wise 
to turn the cursor back on at this point to see where we are writing to:</p>

<p><code>py
&gt;&gt;&gt; cad.lcd.cursor_on()
&gt;&gt;&gt; cad.lcd.blink_on()
&gt;&gt;&gt; cad.lcd.set_cursor(1,0)
</code></p>

<p>Note that the cursor doesn’t reappear until you move it somewhere. Time 
to write out the logo and finally hide the cursor again.</p>

<p><code>py
&gt;&gt;&gt; cad.lcd.write_custom_bitmap(0)
&gt;&gt;&gt; cad.lcd.write_custom_bitmap(1)
&gt;&gt;&gt; cad.lcd.write_custom_bitmap(2)
&gt;&gt;&gt; cad.lcd.set_cursor(1,1)
&gt;&gt;&gt; cad.lcd.write_custom_bitmap(3)
&gt;&gt;&gt; cad.lcd.write_custom_bitmap(4)
&gt;&gt;&gt; cad.lcd.write_custom_bitmap(5)
&gt;&gt;&gt;
&gt;&gt;&gt; cad.lcd.cursor_off()
&gt;&gt;&gt; cad.lcd.blink_off()
</code></p>

<p><img src="HackspaceLogo.jpg" alt="Custom Bitmaps" /></p>

<p>A pretty pleasing result for an hour of playing around in the Python
shell.</p>

<p>Interestingly, if you redefine one of the custom bitmaps by calling 
<code>store_custom_bitmap()</code> while it is on the display, it changes immediately 
without you having to rewrite it using <code>write_custom_bitmap()</code>.  This 
could be a neat way to have animated characters.  It does mean that 
you really are limited to the 8 it supports though, and you can’t 
“cheat” by defining one, writing it to the display and then re-defining it.</p>

<h2 id="errors">Errors</h2>

<p>If you do try to access or create more custom bitmaps than you should 
you get a nice friendly error message, which is good to know.  It’s always
reassuring that a library is decently written when it provides nice error
messages.</p>

<p>```py
»&gt; cad.lcd.write_custom_bitmap(8)
Traceback (most recent call last):
  File “<stdin>", line 1, in <module>
  File "/usr/lib/python3/dist-packages/pifacecad/lcd.py", line 458, in write_custom_bitmap
	self.char_bank_in_range_or_error(char_bank)
  File "/usr/lib/python3/dist-packages/pifacecad/lcd.py", line 492, in char_bank_in_range_or_error
	cgramaddr=char_bank,
Exception: There are only 8 custom characters (You tried to access 8).</module></stdin></p>

<blockquote>
  <blockquote>
    <blockquote>
      <p>cad.lcd.store_custom_bitmap(8, sh)
Traceback (most recent call last):
  File “<stdin>", line 1, in <module>
  File "/usr/lib/python3/dist-packages/pifacecad/lcd.py", line 474, in store_custom_bitmap
	self.char_bank_in_range_or_error(char_bank)
  File "/usr/lib/python3/dist-packages/pifacecad/lcd.py", line 492, in char_bank_in_range_or_error
	cgramaddr=char_bank,
Exception: There are only 8 custom characters (You tried to access 8).
```</module></stdin></p>
    </blockquote>
  </blockquote>
</blockquote>

<h2 id="and-finally">And Finally…</h2>

<p>Given I only know the basics in Python (though I do code in other languages)
it’s pretty easy to get started with the PiFace and make it do some cool stuff.
It seems like it should be fairly easy to get it doing something useful with
the 3D printer.  More on that later….</p>

<p>Thanks go to <a href="http://uk.farnell.com/">Farnell / Element14</a> for supplying the PiFace
Control and Display board.</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Diy Radiator Booster]]></title>
    <link href="http://swindon.hackspace.org.uk/blog/diy-radiator-booster/"/>
    <updated>2013-10-25T18:05:00+01:00</updated>
    <id>http://swindon.hackspace.org.uk/blog/diy-radiator-booster</id>
    <content type="html"><![CDATA[<p>Central heating is a great invention and radiators generally do a 
good job of pumping out heat into a room.  Sometimes however due
to the layout of the room or positioning of the radiator it
doesn’t quite work as well as it could.  I have a room like this
and decided to go for a bit of a DIY solution.</p>

<!-- more -->

<p><img src="2.jpg" alt="Booster in place" /></p>

<p>My kitchen and dining room are one and also open to the stairs 
and landing.  With only one big raditor in the whole space most 
of the heat tends to rise and go up the stairs rather than circulating
in the rooms, meaning it always feels chilly.  There are various
<a href="http://www.nigelsecostore.com/acatalog/Radiator_Booster.html">commercial radiator boosters</a>
available but some reviews say they are noisy and they all sit on top of
the radiator which would mean moving it everytime I closed the 
curtains.  So I decided to design and build my own.</p>

<h2 id="the-idea">The Idea</h2>

<p>Take a standard quick PC fan, mount it to the bottom of the radiator, 
create a duct to direct the air across the floor and build a circuit
to turn it on automatically when the radiator gets warm.</p>

<h2 id="the-fan">The Fan</h2>

<p>Rather conveniently the gap between the front and back panels of 
the double radiator is just over 80mm meaning a standard PC fan
will fit nicely.  I bought a Be Quiet Silentwings Pure 80mm fan
like this one from <a href="http://www.ebuyer.com/409820-be-quiet-silentwings-pure-80mm-bl041">ebuyer</a>
which turned out to be pretty much silent when running.</p>

<h2 id="the-circuit">The Circuit</h2>

<p>I needed a circuit that would switch on the 12V fan when the 
radiator warmed up and turn it off again when it cooled down.
I could have gone down the microcontroller route to do this, but 
it seemed like a fairly simple circuit with a temperature
sensor and a relay should be able to do the job.  After some time
googling I found exactly what I needed.  <a href="http://www.escol.com.my/Projects/Project-03%28Thermostat-1%29/Proj-03.html">This site</a> 
has done an excellent job of describing how to make a temperature 
controlled relay using a few basic electronics componets.  There are
kits for sale, but I chose to just buy the components and assemble
them on some strip board.</p>

<p><img src="3.jpg" alt="Circuit" /></p>

<h2 id="the-ducting">The Ducting</h2>

<p>Initially I was planning on using some thin plywood or something
similar for the ducting.  However a few members of the hackspace
have 3D printers and kindly offered to print something for me.
So following on from a talk given at the hackspace some months
ago about how to <a href="https://groups.google.com/forum/#!topic/swindon-hackspace/PvvfdYWvo0c">use openscad</a> 
I decided to try and design a 3D printable enclosure.</p>

<p><img src="4.jpg" alt="Ducting" /></p>

<p>It took a couple of attempts to get something that was printable, 
but with the help and advice of other members I managed to design
a nice curved duct with some fins and small box to mount the electronics 
in.  The design is available on <a href="http://www.thingiverse.com/thing:168527">thingiverse</a>.</p>

<h2 id="putting-it-all-together">Putting it all together</h2>

<p>With all the parts made and colder weather fast approaching I 
assembled everything and wired it up using and old 12V power
supply I had lying around.  Tuning the temperature at which the
fan comes on is as simple as adjusting the potentiometer
on the circuit board.  The fan doesn’t blast hot air out like a
fan heater does, but it does produce a gentle breeze of warm
air across the floor.  Whether it has made a huge difference
is hard to tell so far but I don’t think it can hurt.</p>

<p><img src="5.jpg" alt="Complete" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Quadcopter Design and Build]]></title>
    <link href="http://swindon.hackspace.org.uk/blog/quadcopter-builds/"/>
    <updated>2013-09-26T19:08:00+01:00</updated>
    <id>http://swindon.hackspace.org.uk/blog/quadcopter-builds</id>
    <content type="html"><![CDATA[
<p>A couple of members are now putting the finishing touches to their quadcopter builds and proceeding into the upgrade phase (typical). The build process isn’t too difficult with the excellent DJI 450 quadcopter kit, which allows various options to be taken to reach each users end goal, whether it be simple flying or the more advanced (and costly) First Person Viewing (FPV) camera set-up.</p>

<!-- more -->

<p>From a hacking point of view, there are some areas of this hobby which lends itself really well to hacking. I personally have a 3D printer and CAD design skills, therefore items like camera mounts (GoPro etc.), electronics enclosures, landing skids etc. are all able to be designed and manufactured easily. From an electronics perspective there are various radio transmitter hacks or custom firmware mods can be pursued if required too.</p>

<p><a href="2.jpg"><img src="2-small.jpg" alt="Quadcopter First Flight" /></a></p>

<p>I will soon be presenting my quadcopter with on-board live video streaming to <a href="http://wilsar.org.uk/" title="http://wilsar.org.uk/">Wiltshire Search and Rescue</a>. They are extremely interested in seeing the the on-board camera footage with a view to help saving them many man hours of ground based searching. Also it will allow them to view inaccessible areas very quickly such as riverbanks and remote fields. The option to upload pre-programmed missions from Google Maps into the on-board Ardupilot control board then have the GPS navigation system take control at the flick of a switch also sounds appealing. Whole fields can be scanned in seconds and minutes.</p>

<p>These are eye-in-the-sky images that I have currently been getting through the on-board GoPro Hero 3:</p>

<p><a href="3.jpg"><img src="3-small.jpg" alt="Swindon Remote Control Car Club" /></a></p>

<p><a href="4.jpg"><img src="4-small.jpg" alt="Moredon Playing Fields" /></a></p>

<p><a href="5.jpg"><img src="5-small.jpg" alt="Wroughton Airfield" /></a></p>

<p><a href="6.jpg"><img src="6-small.jpg" alt="Wroughton and Swindon from Wroughton Airfield" /></a></p>

<p>Flight videos have been uploaded on YouTube too:</p>

<p><iframe src="http://www.youtube.com/embed/X6MDkSDx5UQ" frameborder="0" webkitAllowFullScreen mozallowfullscreen allowFullScreen></iframe>
<iframe src="http://www.youtube.com/embed/ch740siWPGY" frameborder="0" webkitAllowFullScreen mozallowfullscreen allowFullScreen></iframe>
<iframe src="http://www.youtube.com/embed/yl5OPOSkdmI" frameborder="0" webkitAllowFullScreen mozallowfullscreen allowFullScreen></iframe></p>

<p>The next stage for me is to re-build my quad to a “spider style” configuration. This will be achieved by redesigning the central plates to orientate the forward arms out of the shot from the camera view. Click on the images below to download my CAD files from <a href="http://www.thingiverse.com/" title="http://www.thingiverse.com/">Thingiverse</a>.</p>

<p><a href="http://www.thingiverse.com/thing:160607"><img src="Render2.png" alt="Spyda 500 Quadcopter" /></a></p>

<p><a href="http://www.thingiverse.com/thing:160607"><img src="Render3.png" alt="Spyda 500 Quadcopter" /></a></p>

<p><a href="8.jpg"><img src="8-small.jpg" alt="Spyda 500 Quadcopter" /></a></p>

<p><a href="7.jpg"><img src="7-small.jpg" alt="Spyda 500 Quadcopter" /></a></p>

<p>And a GoPro Hero 3 mount that is fully printable :</p>

<p><a href="http://www.thingiverse.com/thing:163107"><img src="Render4.png" alt="Spyda 500 GoPro Hero 3 Mount" /></a></p>

<p>If you are interested in finding out more about this hobby then come along to the <a href="/about/#weekly-meetings" title="http://swindon.hackspace.org.uk/about/">Swindon Hackspace</a> on a Wednesday night and have a chat with some like minded members.</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Heathkit Hero 1 Printable Parts]]></title>
    <link href="http://swindon.hackspace.org.uk/blog/heathkit-hero-printable-parts/"/>
    <updated>2013-09-09T20:15:00+01:00</updated>
    <id>http://swindon.hackspace.org.uk/blog/heathkit-hero-printable-parts</id>
    <content type="html"><![CDATA[<p><em>As mentioned in a <a href="/blog/2013-07-03-meeting-report/" title="http://swindon.hackspace.org.uk/blog/2013-07-03-meeting-report/">previous post</a>,
the hackspace has been working on getting an old <a href="http://en.wikipedia.org/wiki/HERO_(robot)">Heathkit Hero</a> robot up and running.</em></p>

<p>We are almost starting to build up a mini library of printable Heathkit Hero 1 parts. The latest edition is not so much a replacement but a component fix that should allow a broken robotic arm to be repaired and re-attached. A common problem is the area around the shoulder attachment of the arm body where the plastic goes brittle with age.</p>

<!-- more -->

<p>Whilst this repair will obviously make your robot un-original, it will salvage any broken arms and allow Hero to be fighting fit for an arm wrestle again. It has been designed sympathetically and if printed with grey plastic, it should blend in well and make Hero appear like it’s on steroids.</p>

<p>Other replacment printable parts for Heathkit Hero 1 designed at the Swindon Hackspace include new Grippers and a Wrist Joint :-</p>

<p><img src="http://thingiverse-production.s3.amazonaws.com/renders/e5/bb/db/11/45/arm-wrist_display_large.jpg" alt="Heathkit Hero Grippers" /></p>

<p>The source stl files for printing can be found on Thingiverse along with further instructions.</p>

<p>Grippers:
<a href="http://www.thingiverse.com/thing:67929" title="http://www.thingiverse.com/thing:67929">http://www.thingiverse.com/thing:67929</a></p>

<p><a href="http://www.thingiverse.com/thing:67929"><img src="http://thingiverse-production.s3.amazonaws.com/renders/e2/72/6a/48/aa/photo_display_medium.jpg" alt="http://www.thingiverse.com/thing:67929" /></a></p>

<p>Wrist Joint:
<a href="http://www.thingiverse.com/thing:70995" title="http://www.thingiverse.com/thing:70995">http://www.thingiverse.com/thing:70995</a></p>

<p><a href="http://www.thingiverse.com/thing:70995"><img src="http://thingiverse-production.s3.amazonaws.com/renders/f1/41/05/97/fc/photo2_display_medium.jpg" alt="http://www.thingiverse.com/thing:70995" /></a></p>

<p>Arm Repair:
<a href="http://www.thingiverse.com/thing:158652" title="http://www.thingiverse.com/thing:158652">http://www.thingiverse.com/thing:158652</a></p>

<p><a href="http://www.thingiverse.com/thing:158652"><img src="http://thingiverse-production.s3.amazonaws.com/renders/00/34/0e/e4/95/DSCF9328_display_large.jpg" alt="http://www.thingiverse.com/thing:158652" /></a></p>

<p>For more information about Hero please visit :</p>

<p><a href="http://theoldrobots.com/hero1.html" title="http://theoldrobots.com/hero1.html">http://theoldrobots.com/hero1.html</a></p>

<p>A couple more images of Hero on our blog post :
<a href="/blog/2013-07-03-meeting-report/" title="http://swindon.hackspace.org.uk/blog/2013-07-03-meeting-report/">2013-07-03-meeting-report</a></p>

<p>Either come along to the <a href="/about/#weekly-meetings" title="http://swindon.hackspace.org.uk/about/">Swindon Hackspace</a> on a Wednesday night or the <a href="http://www.museumofcomputing.org.uk/exhibitions/2-current-exhibitions/108-robots-revealed" title="http://www.museumofcomputing.org.uk/exhibitions/2-current-exhibitions/108-robots-revealed">Robots Revealed</a> exhibition at the <a href="http://www.museum-of-computing.org.uk/" title="http://www.museum-of-computing.org.uk/">Swindon Museum of Computing</a> for the next few months to have a closer look.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Twitter To Teletype]]></title>
    <link href="http://swindon.hackspace.org.uk/blog/twitter-to-teletype/"/>
    <updated>2012-11-06T20:06:00+00:00</updated>
    <id>http://swindon.hackspace.org.uk/blog/twitter-to-teletype</id>
    <content type="html"><![CDATA[<p>The <a href="http://www.museum-of-computing.org.uk/">Museum of Computing</a> in Swindon has a working Teletype and a desire to get it to print out tweets as part of a display in the museum.  Since the <a href="http://swindon.hackspace.org.uk">Swindon Hackspace</a> is based in the museum it was a perfect project for hackspace members.</p>

<p><img src="Teletype.jpg" alt="Teletype" /></p>

<!-- more -->

<h2 id="current-loop-interface">Current Loop Interface</h2>

<p>The teletype uses a current loop interface to communicate with other (teletype) devices.  The current loop interface is similar to a standard RS232 serial interface found on a PC except rather than using changes in voltage to represent 0’s and 1’s it uses changes in current.  Data is sent at 110 baud - very slowly compared to modern standards, but this is as fast as the teletype can print characters and it has no means to buffer the data it receives.</p>

<p>After a few failed attempts and fried components a circuit was built to convert from RS232 serial into current loop using…. [ <em>what?, circuit diagram?, any more info?</em> ]</p>

<p><img src="CurrentLoopConverter.jpg" alt="Current Loop Converter" /></p>

<p>The teletype also uses a slightly different character set to standard ASCII so a character set conversion was required.  This conversion implemented in the C# code running on the Raspberry Pi. This also allowed for use of some of the mechanical functions of the teletype such as the bell which you can hear ring as the teletype prints out a tweet</p>

<p><a href="https://github.com/snhack/TwitterToTeletype/wiki/images/TeletypeCharMap.png">Character Map Table</a></p>

<h2 id="mechanical-issues">Mechanical Issues?</h2>

<p>The teletype is mainly a mechanical device and contains only a single circuit board consisting of a few resistors, diodes and transistors <em>photo required</em>  Many of the hardest problems to overcome turned out to be mechanical rather than electronic or software problems.</p>

<p>Upon initially managing to send data to the teletype over and RS232 port and via the current loop converter many characters were being printed out incorrectly.  After reading the teletype manuals found online it was discovered that there was a mechanical adjustment lever at the back of the teletype which controlled the alignment of some cogs used in decoding the character data sent over the current loop.  After a few minor adjustments with this lever most characters now print correctly.</p>

<p><img src="LeverPostion.jpg" alt="Lever Position" /></p>

<p>You may notice that the teletype still occasionally prints the wrong character.  This is down to mechanical issues rather than any software or electronic fault and is simply due to the age of the machine and worn mechanical components.</p>

<h2 id="whats-with-all-the-noise">Whats With All The Noise?</h2>

<p>Because the teletype is a mechanical device which uses moving parts to decode the data it receives it has to be running continuously and hence makes a lot of noise even when not printing text.  In order to minimize the noise generated when the teletype wasn’t printing anything a circuit was created using an ATTiny2313 (similar to the programmable chip used in an Arduino) and a relay to turn the power to the teletype on just before data was due to be sent and off once the printing was complete.  This chip was also programmed to bridge the connection from USB on the Raspberry Pi to the serial data that was needed to send to the current loop converter to talk to the teletype.</p>

<p><img src="UsbSwitch.jpg" alt="USB Switch" />
<img src="UsbSwitch2.jpg" alt="USB Switch" /></p>

<h2 id="getting-tweets-and-putting-it-all-together">Getting Tweets And Putting It All Together</h2>

<p>A C# application was written to connect to the twitter API and pickup tweets sent to the museums twitter account.  Running under Mono on Linux, this software then communicates with the ATTiny micro-controller via a USB to serial converter and sends instructions to turn the teletype on.  It then sends the text of the tweet in 50 character chunks (due to memory limitations on the ATTiny) to be forwarded on to the current loop interface at 110 baud and finally the teletype prints out the tweet.</p>

<p><iframe src="http://www.youtube.com/embed/_HGV4Ppnx14" frameborder="0" webkitAllowFullScreen mozallowfullscreen allowFullScreen></iframe></p>

<p><img src="TeletypeComplete.jpg" alt="Complete" />
<img src="TeletypePaper.jpg" alt="Printing" /></p>

<h2 id="more-information">More Information</h2>

<ul>
  <li><a href="http://swindon.hackspace.org.uk">Swindon Hackspace</a></li>
  <li><a href="http://www.museum-of-computing.org.uk/">Museum of Computing</a></li>
  <li><a href="http://en.wikipedia.org/wiki/Teletype_Model_33">Model 33 Teletype on Wikipedia</a></li>
  <li><a href="http://en.wikipedia.org/wiki/Current_loop">Current loop on Wikipedia</a></li>
  <li><a href="https://github.com/snhack/TwitterToTeletype">Source Code</a></li>
  <li><a href="http://www.raspberrypi.org/">Raspberry Pi</a></li>
</ul>

<p><em>This article was originally posted at: <a href="https://github.com/snhack/TwitterToTeletype/wiki">TwitterToTeletype/wiki</a></em></p>
]]></content>
  </entry>
  
</feed>
